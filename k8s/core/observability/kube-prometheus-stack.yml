---
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: core-kube-prometheus-stack
  labels:
    app: core-kube-prometheus-stack
spec:
  goTemplate: true
  generators:
    - clusters: {}
  template:
    metadata:
      name: core-kube-prometheus-stack-{{ .name }}
      labels:
        app: core-kube-prometheus-stack
    spec:
      project: default
      syncPolicy:
        syncOptions:
          - CreateNamespace=true
        automated:
          prune: true
      destination:
        name: "{{ .name }}"
        namespace: core-observability
      source:
        repoURL: https://prometheus-community.github.io/helm-charts
        targetRevision: 70.5.0
        chart: kube-prometheus-stack
        helm:
          releaseName: kube-prometheus-stack
          skipCrds: true # See https://github.com/argoproj/argo-cd/issues/8128
          values: |
            kubeControllerManager:
              endpoints:
                - {{ .metadata.annotations.controllerEndpoint }}
            kubeScheduler:
              endpoints:
                - {{ .metadata.annotations.controllerEndpoint }}
            kubeEtcd:
              endpoints:
                - {{ .metadata.annotations.controllerEndpoint }}
            kubeProxy:
              enabled: false

            prometheus:
              enabled: true
              annotations:
                secret.reloader.stakater.com/reload: thanos-objstore
              prometheusSpec:
                replicas: 1
                externalLabels:
                  prometheus_cluster: {{ .name }}
                prometheusExternalLabelNameClear: true
                enableAdminAPI: true
                retention: 2d
                retentionSize: 10GiB
                storageSpec:
                  volumeClaimTemplate:
                    spec:
                      accessModes:
                        - ReadWriteOnce
                      resources:
                        requests:
                          storage: 15Gi
                ruleSelectorNilUsesHelmValues: false
                serviceMonitorSelectorNilUsesHelmValues: false
                podMonitorSelectorNilUsesHelmValues: false
                probeSelectorNilUsesHelmValues: false
                additionalScrapeConfigsSecret:
                  enabled: true
                  name: prometheus-additional-scrape-configs
                  key: prometheus-config.yml
                thanos:
                  objectStorageConfig:
                    existingSecret:
                      name: thanos-objstore
                      key: objstore.yml
                  additionalArgs:
                    - name: hash-func
                      value: SHA256
              thanosService:
                enabled: true
              thanosServiceMonitor:
                enabled: true
              thanosIngress:
                enabled: true
                pathType: Prefix
                annotations:
                  cert-manager.io/cluster-issuer: letsencrypt-prod-http01
                  nginx.ingress.kubernetes.io/backend-protocol: GRPC
                  nginx.ingress.kubernetes.io/protocol: h2c
                  nginx.ingress.kubernetes.io/proxy-read-timeout: "160"
                hosts:
                  - thanos.{{ .name | replace "lama.tel" "as212024.net" }}
                tls:
                  - hosts:
                      - thanos.{{ .name | replace "lama.tel" "as212024.net" }}
                    secretName: thanos-tls
              ingress:
                enabled: true
                pathType: Prefix
                annotations:
                  cert-manager.io/cluster-issuer: letsencrypt-prod-http01
                hosts:
                  - prometheus.{{ .name | replace "lama.tel" "as212024.net" }}
                tls:
                  - hosts:
                      - prometheus.{{ .name | replace "lama.tel" "as212024.net" }}
                    secretName: prometheus-tls

            alertmanager:
              enabled: true
              annotations:
                secret.reloader.stakater.com/reload: alertmanager-discord-webhooks
              config:
                route:
                  group_by:
                    - namespace
                    - alertname
                  receiver: "null"
                  routes:
                    - matchers:
                        - severity =~ "warning"
                      repeat_interval: 7d
                      receiver: discord-infra-alerts
                    - matchers:
                        - severity =~ "critical"
                      repeat_interval: 6h
                      receiver: discord-infra-critical-alerts
                    - matchers:
                        - severity =~ "disaster"
                      repeat_interval: 1h
                      receiver: discord-infra-critical-alerts
                receivers:
                  - name: "null"
                  - name: discord-infra-alerts
                    slack_configs:
                      - api_url_file: /etc/alertmanager/secrets/alertmanager-discord-webhooks/infra-alerts
                        title: '{{ "{{ template \"discord.title\" . }}" }}'
                        color: '{{ "{{ template \"discord.color\" . }}" }}'
                        text: '{{ "{{ template \"discord.text\" . }}" }}'
                  - name: discord-infra-critical-alerts
                    slack_configs:
                      - api_url_file: /etc/alertmanager/secrets/alertmanager-discord-webhooks/infra-critical-alerts
                        send_resolved: true
                        title: '{{ "{{ template \"discord.title\" . }}" }}'
                        color: '{{ "{{ template \"discord.color\" . }}" }}'
                        text: '{{ "{{ template \"discord.text\" . }}" }}'
              templateFiles:
                "discord.tmpl": |
                  {{ `
                    {{ define "__alert_severity_prefix_title" -}}
                      {{ if ne .Status "firing" -}}
                      :large_green_circle:
                      {{- else if eq .CommonLabels.severity "disaster" -}}
                      :fire:
                      {{- else if eq .CommonLabels.severity "critical" -}}
                      :red_circle:
                      {{- else if eq .CommonLabels.severity "warning" -}}
                      :warning:
                      {{- else if eq .CommonLabels.severity "info" -}}
                      :information_source:
                      {{- else -}}
                      :question:
                      {{- end }}
                    {{- end }}

                    {{ define "discord.title" -}}
                      [{{ .Status | toUpper -}}
                      {{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{- end -}}
                      ] {{ template "__alert_severity_prefix_title" . }} {{ .CommonLabels.alertname }}
                    {{- end }}

                    {{ define "discord.color" -}}
                      {{ if ne .Status "firing" -}}
                      #439FE0
                      {{- else if eq .CommonLabels.severity "disaster" -}}
                      danger
                      {{- else if eq .CommonLabels.severity "critical" -}}
                      danger
                      {{- else if eq .CommonLabels.severity "warning" -}}
                      warning
                      {{- else -}}
                      #439FE0
                      {{- end }}
                    {{- end }}

                    {{ define "discord.text" -}}
                      *Severity:* {{ .CommonLabels.severity }}
                      {{- if (index .Alerts 0).Annotations.summary }}
                      {{- "\n" -}}
                      *Summary:* {{ (index .Alerts 0).Annotations.summary }}
                      {{- end }}
                      *Cluster*: {{ .CommonLabels.cluster }}

                      {{ range .Alerts }}

                        {{- if .Annotations.description }}
                        {{- "\n" -}}
                        {{ .Annotations.description }}
                        {{- "\n" -}}
                        {{- end }}
                        {{- if .Annotations.message }}
                        {{- "\n" -}}
                        {{ .Annotations.message }}
                        {{- "\n" -}}
                        {{- end }}

                      {{- end }}

                    {{- end }}
                  ` }}
              alertmanagerSpec:
                secrets:
                  - alertmanager-discord-webhooks
                replicas: 1
                storage:
                  volumeClaimTemplate:
                    spec:
                      accessModes:
                        - ReadWriteOnce
                      resources:
                        requests:
                          storage: 5Gi
              ingress:
                enabled: true
                pathType: Prefix
                annotations:
                  cert-manager.io/cluster-issuer: letsencrypt-prod-http01
                  nginx.ingress.kubernetes.io/auth-url: |-
                    http://ak-outpost-proxy-outpost-as212024net.services-authentik.svc.c.k3s.fsn.lama.tel:9000/outpost.goauthentik.io/auth/nginx
                  nginx.ingress.kubernetes.io/auth-signin: |-
                    https://alertmanager.{{ .name }}/outpost.goauthentik.io/start?rd=$escaped_request_uri
                  nginx.ingress.kubernetes.io/auth-response-headers: |-
                    Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid
                  nginx.ingress.kubernetes.io/auth-snippet: |
                    proxy_set_header X-Forwarded-Host $http_host;
                hosts:
                  - alertmanager.{{ .name | replace "lama.tel" "as212024.net" }}
                tls:
                  - hosts:
                      - alertmanager.{{ .name | replace "lama.tel" "as212024.net" }}
                    secretName: alertmanager-tls

            grafana:
              enabled: false
              forceDeployDashboards: true
              sidecar:
                dashboards:
                  multicluster:
                    global:
                      enabled: true
                    etcd:
                      enabled: true

            nodeExporter:
              enabled: false
---
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: core-kube-prometheus-stack-crds
  labels:
    app: core-kube-prometheus-stack
spec:
  goTemplate: true
  generators:
    - clusters: {}
  template:
    metadata:
      name: core-kube-prometheus-stack-crds-{{ .name }}
      labels:
        app: core-kube-prometheus-stack
    spec:
      project: default
      syncPolicy:
        syncOptions:
          - CreateNamespace=true
          - Replace=true
        automated:
          prune: true
      destination:
        name: "{{ .name }}"
        namespace: core-observability
      source:
        repoURL: https://github.com/prometheus-community/helm-charts.git
        targetRevision: kube-prometheus-stack-70.4.1
        path: charts/kube-prometheus-stack/charts/crds/crds
        directory:
          recurse: true
