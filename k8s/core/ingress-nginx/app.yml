---
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: core-ingress-nginx
  labels:
    app: core-ingress-nginx
spec:
  goTemplate: true
  generators:
    - list:
        elements:
          - cluster: k3s.fsn.lama.tel
            name: public
            default: true
            lbIpamIps: 2001:67c:17fc:130::80,2001:67c:17fc:130::443,148.251.148.235
            tolerations: []
          - cluster: k3s.fsn.lama.tel
            name: bar
            default: false
            lbIpamIps: 2001:67c:17fc:130::82,209.112.97.162
            tolerations:
              - key: "role.lama.tel/media"
                operator: "Exists"
                effect: "NoExecute"
              - key: nvidia.com/gpu
                operator: Exists
                effect: NoSchedule
            nodeSelector: |
              kubernetes.io/hostname: k3s-2.bar.lama.tel
  template:
    metadata:
      name: core-ingress-nginx-{{ .cluster }}-{{ .name }}
      labels:
        app: core-ingress-nginx
    spec:
      project: default
      syncPolicy:
        automated:
          prune: true
      destination:
        name: "{{ .cluster }}"
        namespace: core-ingress-nginx
      source:
        repoURL: https://kubernetes.github.io/ingress-nginx
        targetRevision: 4.12.1
        chart: ingress-nginx
        helm:
          releaseName: ingress-nginx-{{ .name }}
          values: |
            controller:
              minAvailable: 1
              replicaCount: 1
              allowSnippetAnnotations: true
              enableAnnotationValidations: false
              watchIngressWithoutClass: {{ .default }}
              ingressClass: nginx-{{ .name }}
              ingressClassResource:
                enabled: true
                default: {{ .default }}
                name: nginx-{{ .name }}
                controllerValue: k8s.io/ingress-nginx-{{ .name }}
              service:
                type: LoadBalancer
                externalTrafficPolicy: Local
                annotations:
                  external-dns.alpha.kubernetes.io/hostname: ingress-{{ .name }}.{{ .cluster | replace "lama.tel" "as212024.net" }}
                  io.cilium/lb-ipam-ips: {{ .lbIpamIps }}
                ipFamilyPolicy: RequireDualStack
                ipFamilies:
                  - IPv4
                  - IPv6
              admissionWebhooks:
                enabled: false
              tolerations: {{ toRawJson .tolerations }}
              nodeSelector:
                kubernetes.io/os: linux
                {{ default "" .nodeSelector }}
              config:
                use-http2: "true"
                use-gzip: "true"
                enable-brotli: "true"
                log-format-escape-json: "true"
                log-format-upstream: '{"msec": "$msec", "connection": "$connection", "connection_requests": "$connection_requests", "pid": "$pid", "request_id": "$request_id", "request_length": "$request_length", "remote_addr": "$remote_addr", "remote_user": "$remote_user", "remote_port": "$remote_port", "time_local": "$time_local", "time_iso8601": "$time_iso8601", "request": "$request", "request_uri": "$request_uri", "args": "$args", "status": "$status", "body_bytes_sent": "$body_bytes_sent", "bytes_sent": "$bytes_sent", "http_referer": "$http_referer", "http_user_agent": "$http_user_agent", "http_x_forwarded_for": "$http_x_forwarded_for", "http_host": "$http_host", "server_name": "$server_name", "request_time": "$request_time", "upstream": "$upstream_addr", "upstream_connect_time": "$upstream_connect_time", "upstream_header_time": "$upstream_header_time", "upstream_response_time": "$upstream_response_time", "upstream_response_length": "$upstream_response_length", "upstream_cache_status": "$upstream_cache_status", "ssl_protocol": "$ssl_protocol", "ssl_cipher": "$ssl_cipher", "scheme": "$scheme", "request_method": "$request_method", "server_protocol": "$server_protocol", "pipe": "$pipe", "gzip_ratio": "$gzip_ratio", "http_cf_ray": "$http_cf_ray"}'
                ssl-reject-handshake: "true"
                proxy-buffer-size: 16k
                annotations-risk-level: Critical
              metrics:
                enabled: true
                serviceMonitor:
                  enabled: true
                prometheusRule:
                  enabled: true
                  rules:
                    - alert: NGINXConfigFailed
                      expr: count(nginx_ingress_controller_config_last_reload_successful == 0) > 0
                      for: 1s
                      labels:
                        severity: critical
                      annotations:
                        description: bad ingress config - nginx config test failed
                        summary: uninstall the latest ingress changes to allow config reloads to resume
                    - alert: NGINXCertificateExpiry
                      expr: (avg(nginx_ingress_controller_ssl_expire_time_seconds) by (host) - time()) < 604800
                      for: 1s
                      labels:
                        severity: critical
                      annotations:
                        description: ssl certificate(s) will expire in less then a week
                        summary: renew expiring certificates to avoid downtime
                    - alert: NGINXTooMany500s
                      expr: 100 * ( sum( nginx_ingress_controller_requests{status=~"5.+"} ) / sum(nginx_ingress_controller_requests) ) > 5
                      for: 1m
                      labels:
                        severity: warning
                      annotations:
                        description: Too many 5XXs
                        summary: More than 5% of all requests returned 5XX, this requires your attention
                    # - alert: NGINXTooMany400s
                    #   expr: 100 * ( sum( nginx_ingress_controller_requests{status=~"4.+"} ) / sum(nginx_ingress_controller_requests) ) > 5
                    #   for: 1m
                    #   labels:
                    #     severity: warning
                    #   annotations:
                    #     description: Too many 4XXs
                    #     summary: More than 5% of all requests returned 4XX, this requires your attention
---
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: core-ingress-nginx-extra
  labels:
    app: core-ingress-nginx
spec:
  goTemplate: true
  generators:
    - clusters: {}
  template:
    metadata:
      name: core-ingress-nginx-extra-{{ .name }}
      labels:
        app: core-ingress-nginx
    spec:
      project: default
      syncPolicy:
        syncOptions:
          - CreateNamespace=true
        automated:
          prune: true
      destination:
        name: "{{ .name }}"
        namespace: core-ingress-nginx
      source:
        repoURL: https://gitlab.com/lama-corp/infra/infrastructure.git
        targetRevision: HEAD
        path: k8s/core/ingress-nginx/extra/{{ .name }}
