---

- name: Create servarr Docker network
  community.docker.docker_network:
    name: servarr

- name: Ensure media group exists
  ansible.builtin.group:
    name: media
    gid: "{{ servarr_media_user_gid }}"

- name: Ensure media user exists
  ansible.builtin.user:
    name: media
    uid: "{{ servarr_media_user_uid }}"
    group: media
    create_home: false

- name: Deploy servarr docker-compose
  ansible.builtin.include_role:
    name: docker_compose
  vars:
    docker_compose_project_name: servarr

    docker_compose_services:
      lidarr:
        image: "{{ lidarr_docker_repository }}:{{ lidarr_docker_tag }}"
        environment: "{{ lidarr_environment_computed }}"
        volumes:
          - lidarr_config:/config
          - /media:/media
        networks:
          - servarr
        reverse_proxy: "{{ lidarr_reverse_proxy_computed }}"

      prowlarr:
        image: "{{ prowlarr_docker_repository }}:{{ prowlarr_docker_tag }}"
        environment: "{{ prowlarr_environment_computed }}"
        volumes:
          - prowlarr_config:/config
        networks:
          - servarr
        reverse_proxy: "{{ prowlarr_reverse_proxy_computed }}"

      radarr:
        image: "{{ radarr_docker_repository }}:{{ radarr_docker_tag }}"
        environment: "{{ radarr_environment_computed }}"
        volumes:
          - radarr_config:/config
          - /media:/media
        networks:
          - servarr
        reverse_proxy: "{{ radarr_reverse_proxy_computed }}"

      readarr:
        image: "{{ readarr_docker_repository }}:{{ readarr_docker_tag }}"
        environment: "{{ readarr_environment_computed }}"
        volumes:
          - readarr_config:/config
          - /media:/media
        networks:
          - servarr
        reverse_proxy: "{{ readarr_reverse_proxy_computed }}"

      sonarr:
        image: "{{ sonarr_docker_repository }}:{{ sonarr_docker_tag }}"
        environment: "{{ sonarr_environment_computed }}"
        volumes:
          - sonarr_config:/config
          - /media:/media
        networks:
          - servarr
        reverse_proxy: "{{ sonarr_reverse_proxy_computed }}"

      recyclarr:
        image: "{{ recyclarr_docker_repository }}:{{ recyclarr_docker_tag }}"
        volumes:
          - recyclarr_config:/config
        networks:
          - servarr
        user: "{{ servarr_media_user_uid }}:{{ servarr_media_user_gid }}"

    docker_compose_existing_networks:
      - servarr

    docker_compose_networks:
      servarr:
        external: true

    docker_compose_volumes_dir_owner: "{{ servarr_media_user_uid }}"
    docker_compose_volumes_dir_group: "{{ servarr_media_user_gid }}"
    docker_compose_volumes_dir_mode: 0775

- name: Ensure configurations are up-to-date
  ansible.builtin.copy:
    content: "{{ item.config | ansible.utils.to_xml(full_document=False, indent='spaces', indent_width=2) }}"
    dest: "/srv/servarr/volumes/{{ item.name }}_config/config.xml"
    owner: media
    group: media
    mode: 0644
  loop:
    - name: lidarr
      config: "{{ lidarr_config_computed }}"
    - name: prowlarr
      config: "{{ prowlarr_config_computed }}"
    - name: sonarr
      config: "{{ sonarr_config_computed }}"
    - name: radarr
      config: "{{ radarr_config_computed }}"
    - name: readarr
      config: "{{ readarr_config_computed }}"
  notify: Restart docker-compose

- name: Ensure recyclarr configuration is up-to-date
  ansible.builtin.copy:
    content: "{{ recyclarr_config_computed | to_nice_yaml }}"
    dest: "/srv/servarr/volumes/recyclarr_config/recyclarr.yml"
    owner: media
    group: media
    mode: 0644
