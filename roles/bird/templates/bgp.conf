{% if bird_asn is defined %}
define OUR_AS = {{ bird_asn }};
{% endif %}

{% if bird_bgp_region_id is defined %}
define REGION_ID = {{ bird_bgp_region_id }};
{% endif %}
{% if bird_bgp_site_id is defined %}
define SITE_ID = {{ bird_bgp_site_id }};
{% endif %}

{% if bird_bgp_originations.v4 is defined %}
define ORIGINATED_PREFIXES_4 = [
  {{ bird_bgp_originations.v4 | join(',\n  ') }}
];
{% endif %}

{% if bird_bgp_originations.v6 is defined %}
define ORIGINATED_PREFIXES_6 = [
  {{ bird_bgp_originations.v6 | join(',\n  ') }}
];
{% endif %}

{% if bird_bgp_originations.v4 is defined %}
define OUR_INTERNAL_PREFIXES_4 = [
  {{ bird_bgp_originations.v4 | product(['+']) | map('join') | join(',\n  ') }}
];
{% endif %}

{% if bird_bgp_originations.v6 is defined %}
define OUR_INTERNAL_PREFIXES_6 = [
  {{ bird_bgp_originations.v6 | product(['+']) | map('join') | join(',\n  ') }}
];
{% endif %}

{% if bird_bgp_blacklist.v4 is defined %}
define BGP_GLOBAL_BLACKLIST_4 = [
  {{ bird_bgp_blacklist.v4 | join(',\n  ') }}
];
{% endif %}

{% if bird_bgp_blacklist.v6 is defined %}
define BGP_GLOBAL_BLACKLIST_6 = [
  {{ bird_bgp_blacklist.v6 | join(',\n  ') }}
];
{% endif %}

{% if bird_bgp_whitelist.v4 is defined %}
define BGP_GLOBAL_WHITELIST_4 = [
  {{ bird_bgp_whitelist.v4 | join(',\n  ') }}
];
{% endif %}

{% if bird_bgp_whitelist.v6 is defined %}
define BGP_GLOBAL_WHITELIST_6 = [
  {{ bird_bgp_whitelist.v6 | join(',\n  ') }}
];
{% endif %}

# --- Constants ---

define BOGONS_4 = [
  0.0.0.0/0,              # Default route
  0.0.0.0/8{8,32},        # IANA - Local Identification
  10.0.0.0/8{8,32},       # RFC 1918 - Private Use
  100.64.0.0/10{10,32},   # RFC 6598 - Shared Address Space
  127.0.0.0/8{8,32},      # IANA - Loopback
  169.254.0.0/16{16,32},  # RFC 3927 - Link Local
  172.16.0.0/12{12,32},   # RFC 1918 - Private Use
  192.0.2.0/24{24,32},    # RFC 5737 - TEST-NET-1
  192.88.99.0/24{24,32},  # RFC 3068 - 6to4 prefix
  192.168.0.0/16{16,32},  # RFC 1918 - Private Use
  198.18.0.0/15{15,32},   # RFC 2544 - Network Interconnect Device Benchmark Testing
  198.51.100.0/24{24,32}, # RFC 5737 - TEST-NET-2
  203.0.113.0/24{24,32},  # RFC 5737 - TEST-NET-3
  224.0.0.0/3{3,32}       # RFC 5771 - Multcast (formerly Class D)
];

define BOGONS_6 = [
  ::/0,                     # Default route
  ::/8{8,128},              # loopback, unspecified, v4-mapped
  64:ff9b::/96{96,128},     # RFC 6052 - IPv4-IPv6 Translation
  100::/8{8,128},           # RFC 6666 - reserved for Discard-Only Address Block
  200::/7{7,128},           # RFC 4048 - Reserved by IETF
  400::/6{6,128},           # RFC 4291 - Reserved by IETF
  800::/5{5,128},           # RFC 4291 - Reserved by IETF
  1000::/4{4,128},          # RFC 4291 - Reserved by IETF
  2001::/33{33,128},        # RFC 4380 - Teredo prefix
  2001:0:8000::/33{33,128}, # RFC 4380 - Teredo prefix
  2001:2::/48{48,128},      # RFC 5180 - Benchmarking
  2001:3::/32{32,128},      # RFC 7450 - Automatic Multicast Tunneling
  2001:10::/28{28,128},     # RFC 4843 - Deprecated ORCHID
  2001:20::/28{28,128},     # RFC 7343 - ORCHIDv2
  2001:db8::/32{32,128},    # RFC 3849 - NON-ROUTABLE range to be used for documentation purpose
  2002::/16{16,128},        # RFC 3068 - 6to4 prefix
  3ffe::/16{16,128},        # RFC 5156 - used for the 6bone but was returned
  4000::/3{3,128},          # RFC 4291 - Reserved by IETF
  5f00::/8{8,128},          # RFC 5156 - used for the 6bone but was returned
  6000::/3{3,128},          # RFC 4291 - Reserved by IETF
  8000::/3{3,128},          # RFC 4291 - Reserved by IETF
  a000::/3{3,128},          # RFC 4291 - Reserved by IETF
  c000::/3{3,128},          # RFC 4291 - Reserved by IETF
  e000::/4{4,128},          # RFC 4291 - Reserved by IETF
  f000::/5{5,128},          # RFC 4291 - Reserved by IETF
  f800::/6{6,128},          # RFC 4291 - Reserved by IETF
  fc00::/7{7,128},          # RFC 4193 - Unique Local Unicast
  fe80::/10{10,128},        # RFC 4291 - Link Local Unicast
  fec0::/10{10,128},        # RFC 4291 - Reserved by IETF
  ff00::/8{8,128}           # RFC 4291 - Multicast
];

define INVALID_ASNS = [
  0,                      # Reserved. RFC7607
  23456,                  # AS_TRANS. RFC6793
  64496..64511,           # Reserved for use in documentation and sample code. RFC5398
  64512..65534,           # Reserved for Private Use. RFC6996
  65535,                  # Reserved. RFC7300
  65536..65551,           # Reserved for use in documentation and sample code. RFC5398
  65552..131071,          # Reserved.
  4200000000..4294967294, # Reserved for Private Use. [RFC6996]
  4294967295              # Reserved. RFC7300
];

# --- RPKI ---
roa4 table RPKI4;
roa6 table RPKI6;
{% if bird_bgp_rpki is defined %}
protocol rpki RPKI {
  roa4 { table RPKI4; };
  roa6 { table RPKI6; };

  remote "{{ bird_bgp_rpki.host }}" port {{ bird_bgp_rpki.port }};

  retry keep 90;
  refresh keep 900;
  expire keep 172800;
}
{% endif %}

# --- Functions ---
function prefix_is_bogon() -> bool {
  if net.type = NET_IP4 then
    return net ~ BOGONS_4;
  if net.type = NET_IP6 then
    return net ~ BOGONS_6;
  return false;
}

function as_path_contains_invalid_asn() -> bool {
  return bgp_path ~ INVALID_ASNS;
}

function prefix_is_in_global_blacklist() -> bool {
  {% if bird_bgp_blacklist.v4 is defined %}
  if net.type = NET_IP4 then
    return net ~ BGP_GLOBAL_BLACKLIST_4;
  {% endif %}
  {% if bird_bgp_blacklist.v6 is defined %}
  if net.type = NET_IP6 then
    return net ~ BGP_GLOBAL_BLACKLIST_6;
  {% endif %}
  return false;
}

function prefix_is_in_global_whitelist() -> bool {
  {% if bird_bgp_whitelist.v4 is defined %}
  if net.type = NET_IP4 then
    return net ~ BGP_GLOBAL_WHITELIST_4;
  {% endif %}
  {% if bird_bgp_whitelist.v6 is defined %}
  if net.type = NET_IP6 then
    return net ~ BGP_GLOBAL_WHITELIST_6;
  {% endif %}
  return false;
}

function is_own_prefix() -> bool {
  {% if bird_bgp_originations.v4 is defined %}
  if net.type = NET_IP4 then {
    if net ~ ORIGINATED_PREFIXES_4 then {
      bgp_large_community.add((OUR_AS, 101, 1));
      return true;
    }
  }
  {% endif %}

  {% if bird_bgp_originations.v6 is defined %}
  if net.type = NET_IP6 then {
    if net ~ ORIGINATED_PREFIXES_6 then {
      bgp_large_community.add((OUR_AS, 101, 1));
      return true;
    }
  }
  {% endif %}

  return false;
}

function is_own_internal_prefix() -> bool {
  {% if bird_bgp_originations.v4 is defined %}
  if net.type = NET_IP4 then
    return net ~ OUR_INTERNAL_PREFIXES_4;
  {% endif %}
  {% if bird_bgp_originations.v6 is defined %}
  if net.type = NET_IP6 then
    return net ~ OUR_INTERNAL_PREFIXES_6;
  {% endif %}
  return false;
}

function was_learned_from_peer() -> bool {
  return (OUR_AS, 101, 2) ~ bgp_large_community;
}

function was_learned_from_private_peer() -> bool {
  return (OUR_AS, 101, 3) ~ bgp_large_community;
}

function was_learned_from_upstream() -> bool {
  return (OUR_AS, 101, 4) ~ bgp_large_community;
}

function was_learned_from_customer() -> bool {
  return (OUR_AS, 101, 5) ~ bgp_large_community;
}

function is_prefix_length_valid(int pref_len_min; int pref_len_max) -> bool {
  return net.len >= pref_len_min && net.len <= pref_len_max;
}

function should_not_export_to_site() -> bool {
  return (OUR_AS, 603, SITE_ID) ~ bgp_large_community;
}

function should_not_export_to_region() -> bool {
  return (OUR_AS, 603, REGION_ID) ~ bgp_large_community;
}

function should_not_export_to_peers() -> bool {
  return (OUR_AS, 601, 2) ~ bgp_large_community;
}

function should_not_export_to_private_peers() -> bool {
  return (OUR_AS, 601, 3) ~ bgp_large_community;
}

function should_not_export_to_upstreams() -> bool {
  return (OUR_AS, 601, 4) ~ bgp_large_community;
}

function should_not_export_to_customers() -> bool {
  return (OUR_AS, 601, 5) ~ bgp_large_community;
}

function add_peer_community() {
  bgp_large_community.add((OUR_AS, 101, 2));
}

function add_private_peer_community() {
  bgp_large_community.add((OUR_AS, 101, 3));
}

function add_upstream_community() {
  bgp_large_community.add((OUR_AS, 101, 4));
}

function add_customer_community() {
  bgp_large_community.add((OUR_AS, 101, 5));
}

function add_region_community() {
  bgp_large_community.add((OUR_AS, 102, REGION_ID));
}

function add_site_community() {
  bgp_large_community.add((OUR_AS, 103, SITE_ID));
}

function add_global_prepends() {
  if (OUR_AS, 900, 1) ~ bgp_large_community then
    { bgp_path.prepend(OUR_AS); }
  if (OUR_AS, 900, 2) ~ bgp_large_community then
    { bgp_path.prepend(OUR_AS); bgp_path.prepend(OUR_AS); }
  if (OUR_AS, 900, 3) ~ bgp_large_community then
    { bgp_path.prepend(OUR_AS); bgp_path.prepend(OUR_AS); bgp_path.prepend(OUR_AS); }
}

function add_as_specific_prepends(int exporting_asn) {
  if (OUR_AS, 991, exporting_asn) ~ bgp_large_community then
    { bgp_path.prepend(OUR_AS); }
  if (OUR_AS, 992, exporting_asn) ~ bgp_large_community then
    { bgp_path.prepend(OUR_AS); bgp_path.prepend(OUR_AS); }
  if (OUR_AS, 993, exporting_asn) ~ bgp_large_community then
    { bgp_path.prepend(OUR_AS); bgp_path.prepend(OUR_AS); bgp_path.prepend(OUR_AS); }
}

function handle_as_specific_no_export(int exporting_asn) {
  if (OUR_AS, 600, exporting_asn) ~ bgp_large_community then
    reject "NO_EXPORT community in place for specific AS - NOT ANNOUNCING ", net;
}

function route_is_rpki_invalid() -> bool {
  if net.type = NET_IP4 then {
    case roa_check(RPKI4) {
      ROA_VALID: return false;
      ROA_UNKNOWN: return false;
      ROA_INVALID: return true;
    }
  } else {
    case roa_check(RPKI6) {
      ROA_VALID: return false;
      ROA_UNKNOWN: return false;
      ROA_INVALID: return true;
    }
  }
  return false;
}

function honor_graceful_shutdown() {
  if (65535, 0) ~ bgp_community then {
    bgp_local_pref = 0;
  }
}

# https://tools.ietf.org/html/rfc7454#section-11
function scrub_communities_in() {
  bgp_large_community.delete((OUR_AS, 101, 1));         # Learned from peer
  bgp_large_community.delete((OUR_AS, 101, 2));         # Learned from private peer
  bgp_large_community.delete((OUR_AS, 101, 3));         # Learned from IXP
  bgp_large_community.delete((OUR_AS, 101, 4));         # Learned from transit provider
  bgp_large_community.delete((OUR_AS, 101, 5));         # Learned from customer
  bgp_large_community.delete((OUR_AS, 102, REGION_ID)); # Learned in region
  bgp_large_community.delete((OUR_AS, 103, SITE_ID));   # Learned in site
}

function strip_private_asns() {
  bgp_path.delete([64512..65534]);
  bgp_path.delete([4200000000..4294967294]);
}

# --- Filters (technically functions) ---
function default_import() {
  if bgp_path.len > 100 then
    reject "AS_PATH len [", bgp_path.len ,"] longer than 100 - REJECTING ", net;

  if prefix_is_in_global_blacklist() then
    reject "BGP prefix is in global blacklist - REJECTING ", net;

  if is_own_prefix() then
    reject "BGP prefix is our own - REJECTING ", net;

  if is_own_internal_prefix() then {
    if !prefix_is_in_global_whitelist() then
      reject "BGP prefix is our own and internal - REJECTING ", net;
  }

  if prefix_is_bogon() then
    reject "BGP prefix is bogon - REJECTING ", net;

  if net.type = NET_IP4 then
    if !is_prefix_length_valid(8, 24) then
      reject "BGP prefix len [", net.len, "] not in 8-24 - REJECTING ", net;

  if net.type = NET_IP6 then
    if !is_prefix_length_valid(12, 48) then
      reject "BGP prefix len [", net.len, "] not in 12-48 - REJECTING ", net;

  if route_is_rpki_invalid() then
    reject "RPKI, route is INVALID - REJECTING ", net;

  add_region_community();
  add_site_community();
  honor_graceful_shutdown();

  accept;
}

function peer_import() {
  scrub_communities_in();
  add_peer_community();
  default_import();
}

function peer_export() {
  strip_private_asns();
  add_global_prepends();

  if is_own_prefix() then accept;

  if is_own_internal_prefix() then {
    if !prefix_is_in_global_whitelist() then
      reject "BGP prefix is our own and internal - NOT ANNOUNCING ", net;
  }

  if net.type = NET_IP4 then
    if !is_prefix_length_valid(8, 24) then
      reject "BGP prefix len [", net.len, "] not in 8-24 - REJECTING ", net;

  if net.type = NET_IP6 then
    if !is_prefix_length_valid(12, 48) then
      reject "BGP prefix len [", net.len, "] not in 12-48 - REJECTING ", net;

  if prefix_is_bogon() then
    reject "BGP prefix is bogon - NOT ANNOUNCING ", net;

  if as_path_contains_invalid_asn() then
    reject "AS_PATH [", bgp_path ,"] contains invalid ASN - REJECTING ", net;

  if should_not_export_to_site() then
    reject "NO_EXPORT community in place for site - NOT ANNOUNCING ", net;

  if should_not_export_to_region() then
    reject "NO_EXPORT community in place for region - NOT ANNOUNCING ", net;

  if should_not_export_to_peers() then
    reject "NO_EXPORT community in place for peers - NOT ANNOUNCING ", net;

  if prefix_is_in_global_blacklist() then
    reject "BGP prefix is in global blacklist - REJECTING ", net;

  if route_is_rpki_invalid() then
    reject "RPKI, route is INVALID - NOT ANNOUNCING ", net;

  if was_learned_from_customer() then accept;

  reject;
}

function upstream_import() {
  scrub_communities_in();
  add_upstream_community();
  default_import();
  # Some upstreams want to use private ASNs, we'll show them
  strip_private_asns();
}

function upstream_export() {
  strip_private_asns();
  add_global_prepends();

  if is_own_prefix() then accept;

  if route_is_rpki_invalid() then
    reject "RPKI, route is INVALID - NOT ANNOUNCING ", net;

  if is_own_internal_prefix() then {
    if !prefix_is_in_global_whitelist() then
      reject "BGP prefix is our own and internal - NOT ANNOUNCING ", net;
  }

  if net.type = NET_IP4 then
    if !is_prefix_length_valid(8, 24) then
      reject "prefix len [", net.len, "] not in 8-24 - REJECTING ", net;

  if net.type = NET_IP6 then
    if !is_prefix_length_valid(12, 48) then
      reject "prefix len [", net.len, "] not in 12-48 - REJECTING ", net;

  if prefix_is_bogon() then
    reject "BGP prefix is bogon - NOT ANNOUNCING ", net;

  if as_path_contains_invalid_asn() then
    reject "AS_PATH [", bgp_path ,"] contains invalid ASN - REJECTING ", net;

  if should_not_export_to_site() then
    reject "NO_EXPORT community in place for site - NOT ANNOUNCING ", net;

  if should_not_export_to_region() then
    reject "NO_EXPORT community in place for region - NOT ANNOUNCING ", net;

  if should_not_export_to_upstreams() then
    reject "NO_EXPORT community in place for upstreams - NOT ANNOUNCING ", net;

  if prefix_is_in_global_blacklist() then
    reject "BGP prefix is in global blacklist - REJECTING ", net;

  if was_learned_from_customer() then accept;

  reject;
}

function customer_import() {
  scrub_communities_in();
  add_customer_community();
  default_import();
}

function customer_export() {
  strip_private_asns();
  add_global_prepends();

  if is_own_prefix() then accept;

  if is_own_internal_prefix() then {
    if !prefix_is_in_global_whitelist() then
      reject "BGP prefix is our own and internal - NOT ANNOUNCING ", net;
  }

  if net.type = NET_IP4 then
    if !is_prefix_length_valid(8, 24) then
      reject "prefix len [", net.len, "] not in 8-24 - REJECTING ", net;

  if net.type = NET_IP6 then
    if !is_prefix_length_valid(12, 48) then
      reject "prefix len [", net.len, "] not in 12-48 - REJECTING ", net;

  if prefix_is_bogon() then
    reject "BGP prefix is bogon - NOT ANNOUNCING ", net;

  if as_path_contains_invalid_asn() then
    reject "AS_PATH [", bgp_path ,"] contains invalid ASN - REJECTING ", net;

  if should_not_export_to_site() then
    reject "NO_EXPORT community in place for site - NOT ANNOUNCING ", net;

  if should_not_export_to_region() then
    reject "NO_EXPORT community in place for region - NOT ANNOUNCING ", net;

  if should_not_export_to_customers() then
    reject "NO_EXPORT community in place for customers - NOT ANNOUNCING ", net;

  if prefix_is_in_global_blacklist() then
    reject "BGP prefix is in global blacklist - REJECTING ", net;

  if route_is_rpki_invalid() then
    reject "RPKI, route is INVALID - NOT ANNOUNCING ", net;

  if was_learned_from_peer() then accept;
  if was_learned_from_private_peer() then accept;
  if was_learned_from_upstream() then accept;
  if was_learned_from_customer() then accept;

  reject;
}

function core_import() {
  if prefix_is_bogon() then reject;

  if prefix_is_in_global_blacklist() then
    reject "BGP prefix is in global blacklist - REJECTING ", net;

  honor_graceful_shutdown();
  accept;
}

function core_export() {
  if prefix_is_bogon() then reject;

  if prefix_is_in_global_blacklist() then
    reject "BGP prefix is in global blacklist - REJECTING ", net;

  if is_own_prefix() then accept;
  if is_own_internal_prefix() then accept;
  if was_learned_from_peer() then accept;
  if was_learned_from_private_peer() then accept;
  if was_learned_from_upstream() then accept;
  if was_learned_from_customer() then accept;

  reject;
}

# --- Templates ---

template bgp peer4 {
  hold time 90;
  keepalive time 30;
  graceful restart;

  ipv4 {
    next hop self;

    import keep filtered;
    import where peer_import();
    export where peer_export();
  };
}

template bgp peer6 {
  hold time 90;
  keepalive time 30;
  graceful restart;

  ipv6 {
    next hop self;

    import keep filtered;
    import where peer_import();
    export where peer_export();
  };
}

template bgp customer4 {
  hold time 90;
  keepalive time 30;
  graceful restart;

  ipv4 {
    next hop self;

    import keep filtered;
    import where customer_import();
    export where customer_export();
  };
}

template bgp customer6 {
  hold time 90;
  keepalive time 30;
  graceful restart;

  ipv6 {
    next hop self;

    import keep filtered;
    import where customer_import();
    export where customer_export();
  };
}

template bgp core4 {
  hold time 90;
  keepalive time 30;
  graceful restart;

  ipv4 {
    next hop self;

    import keep filtered;
    import where core_import();
    export where core_export();
  };
}

template bgp core6 {
  hold time 90;
  keepalive time 30;
  graceful restart;

  ipv6 {
    next hop self;

    import keep filtered;
    import where core_import();
    export where core_export();
  };
}

template bgp upstream4 {
  hold time 90;
  keepalive time 30;
  graceful restart;

  ipv4 {
    next hop self;

    import keep filtered;
    import where upstream_import();
    export where upstream_export();
  };
}

template bgp upstream6 {
  hold time 90;
  keepalive time 30;
  graceful restart;

  ipv6 {
    next hop self;

    import keep filtered;
    import where upstream_import();
    export where upstream_export();
  };
}

template bgp lookingglass4 {
  hold time 90;
  keepalive time 30;
  graceful restart;

  ipv4 {
    next hop self;

    import keep filtered;
    import filter { reject; };
    export where customer_export();
  };
}

template bgp lookingglass6 {
  hold time 90;
  keepalive time 30;
  graceful restart;

  ipv6 {
    next hop self;

    import keep filtered;
    import filter { reject; };
    export where customer_export();
  };
}

template bgp telemetry4 {
  hold time 90;
  keepalive time 30;
  graceful restart;
  rr client;

  ipv4 {
    next hop self;
    import filter { reject; };
    export filter { accept; };
  };

  ipv6 {
    next hop address 127.0.0.1;
    import filter { reject; };
    export filter { accept; };
  };
}

include "/etc/bird/peers.conf";
