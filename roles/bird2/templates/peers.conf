{% for irr in bird2_bgp_irr_list %}
include "/etc/bird/filters/prefixes/{{ irr.formatted }}_{{ irr.protocol_number }}.conf";
{% endfor %}

{% for session in bird2_bgp_sessions_list %}
{% if session.protocol in session.allowed_prefixes | default({}) %}
define PREFIX_WHITELIST_FOR_{{ session.asn }}_{{ session.protocol_number }} = [
  {{ session.allowed_prefixes[session.protocol] | join(',\n  ') }}
];
{% endif %}

protocol bgp {{ session.type | upper }}_AS{{ session.asn }}_{{ session.protocol | upper }}_{{ session.alias is defined | ternary(session.alias, loop.index) | upper }} from {{ session.type }}{{ session.protocol_number }} {
  description "{{ session.description }}";
  local {{ session.local[session.protocol] }} as {{ bird2_asn }};
  neighbor {{ session.remote[session.protocol] }} {% if session.remote.port is defined %}port {{ session.remote.port}} {% endif %}as {{ session.asn }};
  {% if session.md5 is defined %}
  password "{{ session.md5 }}";
  {% endif %}
  {% if session.disabled | default(False) %}
  disabled yes;
  {% endif %}
  {% if session.route_reflector | default(False) %}
  rr client;
  {% endif %}
  {% if session.multihop is defined %}
  multihop {{ session.multihop }};
  {% endif %}
  {% if session.allow_med | default(False) %}
  allow bgp_med yes;
  {% endif %}
  {% if session.med_metric | default(False) %}
  med metric yes;
  {% endif %}
  default bgp_med {{ session.default_med | default(0) }};

  {% if session.type == 'customer' or session.type == 'peer' or session.type == 'upstream' %}
  ipv{{ session.protocol_number }} {
    import filter {
      {% if session.protocol in session.local_pref | default({}) %}
      {% if session.local_pref[session.protocol].set is defined %}
      bgp_local_pref = {{ session.local_pref[session.protocol].set }};
      {% endif %}
      {% if session.local_pref[session.protocol].increase is defined %}
      bgp_local_pref = bgp_local_pref + {{ session.local_pref[session.protocol].increase }};
      {% endif %}
      {% if session.local_pref[session.protocol].decrease is defined %}
      bgp_local_pref = bgp_local_pref - {{ session.local_pref[session.protocol].decrease }};
      {% endif %}
      {% endif %}

      {% if session.protocol in session.med | default({}) %}
      {% if session.med[session.protocol].set is defined %}
      bgp_med = {{ session.med[session.protocol].set }};
      {% endif %}
      {% if session.med[session.protocol].increase is defined %}
      bgp_med = bgp_med + {{ session.med[session.protocol].increase }};
      {% endif %}
      {% if session.med[session.protocol].decrease is defined %}
      bgp_med = bgp_med - {{ session.med[session.protocol].decrease }};
      {% endif %}
      {% endif %}

      {% if session.irr is defined or session.protocol in session.allowed_prefixes | default({}) %}
      {% if session.irr is defined %}
      if !(net ~ AS_SET_FOR_{{ session.irr_formatted }}_{{ session.protocol_number }}) then
        reject "prefix is not in IRR AS SET - REJECTING ", net;
      {% endif %}

      {% if session.protocol in session.allowed_prefixes | default({}) %}
      if !(net ~ PREFIX_WHITELIST_FOR_{{ session.asn }}_{{ session.protocol_number }}) then
        reject "BGP prefix is not in prefix whitelist - REJECTING ", net;
      {% endif %}

      {{ session.type }}_import();
      {% elif session.type == 'customer' %}
      reject;
      {% else %}
      {{ session.type }}_import();
      {% endif %}
    };

    export filter {
      {% for community in session.communities.export | default([]) %}
        {% set parts = community | split(':') %}
        {% if parts | length == 2 %}
        bgp_community.add(({{ parts | join(', ')}}));
        {% endif %}
        {% if parts | length == 3 %}
        bgp_large_community.add(({{ parts | join(', ')}}));
        {% endif %}
      {% endfor %}

      add_as_specific_prepends({{ session.asn }});
      handle_as_specific_no_export({{ session.asn }});
      {{ session.type }}_export();
    };
  };
  {% elif session.protocol in session.local_pref | default({}) or session.protocol in session.med | default({}) %}
  ipv{{ session.protocol_number }} {
    import filter {
      {% if session.protocol in session.local_pref | default({}) %}
      {% if session.local_pref[session.protocol].set is defined %}
      bgp_local_pref = {{ session.local_pref[session.protocol].set }};
      {% endif %}
      {% if session.local_pref[session.protocol].increase is defined %}
      bgp_local_pref = bgp_local_pref + {{ session.local_pref[session.protocol].increase }};
      {% endif %}
      {% if session.local_pref[session.protocol].decrease is defined %}
      bgp_local_pref = bgp_local_pref - {{ session.local_pref[session.protocol].decrease }};
      {% endif %}
      {% endif %}

      {% if session.protocol in session.med | default({}) %}
      {% if session.med[session.protocol].set is defined %}
      bgp_med = {{ session.med[session.protocol].set }};
      {% endif %}
      {% if session.med[session.protocol].increase is defined %}
      bgp_med = bgp_med + {{ session.med[session.protocol].increase }};
      {% endif %}
      {% if session.med[session.protocol].decrease is defined %}
      bgp_med = bgp_med - {{ session.med[session.protocol].decrease }};
      {% endif %}
      {% endif %}

      {{ session.type }}_import();
    };
  };
  {% endif %}
}
{% endfor %}
